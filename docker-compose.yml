version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: smartcards_postgres
    environment:
      POSTGRES_DB: smartcards_ai
      POSTGRES_USER: smartcards_user
      POSTGRES_PASSWORD: smartcards_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - smartcards_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U smartcards_user -d smartcards_ai"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: smartcards_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - smartcards_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: smartcards_backend
    environment:
      - DATABASE_URL=postgresql://smartcards_user:smartcards_password@postgres:5432/smartcards_ai
      - ASYNC_DATABASE_URL=postgresql+asyncpg://smartcards_user:smartcards_password@postgres:5432/smartcards_ai
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=your-secret-key-here-change-in-production
      - ENVIRONMENT=development
      - DEBUG=true
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - /app/__pycache__
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - smartcards_network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: smartcards_frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_ENVIRONMENT=development
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - smartcards_network
    command: npm start

  # Nginx Reverse Proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: smartcards_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - smartcards_network
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  smartcards_network:
    driver: bridge 